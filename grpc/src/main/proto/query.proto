syntax = "proto3";

option java_package = "io.stargate.proto";

package stargate;

enum Consistency {
  ANY = 0x00;
  ONE = 0x01;
  TWO = 0x02;
  THREE = 0x03;
  QUORUM = 0x04;
  ALL = 0x05;
  LOCAL_QUORUM = 0x06;
  EACH_QUORUM = 0x07;
  SERIAL = 0x08;
  LOCAL_SERIAL = 0x09;
  LOCAL_ONE = 0x0A;
}

// We don't necessarily need to commit to using these codes, it's just a start.
enum ErrorCode {
  SERVER_ERROR = 0x0000;
  PROTOCOL_ERROR = 0x000A; // This probably doesn't make sense
  BAD_CREDENTIALS = 0x0100;
  UNAVAILABLE = 0x1000;
  OVERLOADED = 0x1001;
  IS_BOOTSTRAPPING = 0x1002;
  TRUNCATE_ERROR = 0x1003;
  WRITE_TIMEOUT = 0x1100;
  READ_TIMEOUT = 0x1200;
  READ_FAILURE = 0x1300;
  FUNCTION_FAILURE = 0x1400;
  WRITE_FAILURE = 0x1500;
  SYNTAX_ERROR = 0x2000;
  UNAUTHORIZED = 0x2100;
  INVALID_QUERY = 0x2200;
  CONFIG_ERROR = 0x2300;
  ALREADY_EXISTS = 0x2400;
  UNPREPARED = 0x2500;
  CLIENT_WRITE_FAILURE = 0x8000;
}

message Collection {
  repeated Value elements = 1;
}

message Map {
  message Pair {
    Value key = 1;
    Value value = 2;
  }
  Pair pairs = 1;
}

message UdtValue {
  map<string, Value> fields = 1;
}

/*
message Value {
  message Null { }
  oneof inner {
    Null null = 1;
    int32 i32  = 2; // tinyint, smallint, int
    int64 i64  = 3; // bigint
    float flt = 4; // float
    double dbl = 5; // double
    bool bln = 6; // boolean
    string str = 7; // ascii, varchar, text
    bytes other = 8; // blob, and everything else
    Collection collection = 9; // list, set, tuple
    Map map = 10; // map
    UdtValue udt = 11; // udt
  }
}
 */

message Value {
  message Null { }
  oneof inner {
    Null null = 1;
    bytes payload = 2;
  }
}

message Query {
  string cql = 1;
  QueryParameters parameters = 2;
}

message QueryParameters {
  string keyspace = 1;
  repeated Value values = 2;
  repeated string value_names = 3;
  Consistency consistency = 4;
  int32 page_size = 5;
  bytes paging_state = 6;
  bool tracing = 7;
  bool skip_metadata = 8;
  int64 timestamp = 9;
  Consistency serial_consistency = 10;
  int32 now_in_seconds = 11;
}


message Bound {
  bytes id = 1;
  QueryParameters parameters = 2;
}

message Prepare {
  string cql = 1;
  string keyspace = 2;
  bool tracing = 3;
}

message PrepareResult {
  bytes id = 1;
  bytes metadata_id = 2;
  // Note: Not including partition key indexes
  repeated ColumnSpec bound_columns = 3;
  bytes tracing_id = 4;
  repeated string warnings = 5;
}

enum Type {
  CUSTOM = 0x00;
  ASCII = 0x01;
  BIGINT = 0x02;
  BLOB = 0x03;
  BOOLEAN  = 0x04;
  COUNTER  = 0x05;
  DECIMAL = 0x06;
  DOUBLE = 0x07;
  FLOAT = 0x08;
  INT  = 0x09;
  TIMESTAMP = 0x0B;
  UUID = 0x0C;
  VARCHAR = 0x0D;
  VARINT  = 0x0E;
  TIMEUUID = 0x0F;
  INET = 0x10;
  DATE = 0x11;
  TIME = 0x12;
  SMALLINT = 0x13;
  TINYINT = 0x14;
  LIST = 0x20;
  MAP  = 0x21;
  SET  = 0x22;
  UDT  = 0x30;
  TUPLE  = 0x31;
}

message TypeSpec {
  Type type = 1;
  oneof complex {
    MapSpec map = 2;
    TypeSpec list = 3;
    TypeSpec set = 4;
    UdtSpec udt = 5;
    TupleSpec tuple = 6;
  };
}


message MapSpec {
  TypeSpec key = 1;
  TypeSpec value = 2;
}

message UdtSpec {
  map<string, TypeSpec> fields = 1;
}

message TupleSpec {
  repeated TypeSpec elements = 1;
}


message ColumnSpec {
  TypeSpec type = 1;
  string name = 2;
}

message Result {
  Error error = 1; // Maybe move into payload?
  oneof payload {
    Empty empty = 2;
    ResultSet result_set = 3;
  }
  bytes tracing_id = 4;
  repeated string warnings = 5;
}

message Empty { }

message Unavailable {
  Consistency consistency = 1;
  int32 required = 2;
  int32 alive = 3;
};

message WriteTimeout {
  Consistency consistency = 1;
  int32 received = 2;
  int32 block_for = 3;
  string write_type = 4;
};

message ReadTimeout {
  Consistency consistency = 1;
  int32 received = 2;
  int32 block_for = 3;
  bool data_present = 4;
};

message ReadFailure {
  Consistency consistency = 1;
  int32 received = 2;
  int32 block_for = 3;
  int32 num_failures = 4;
  bool data_present = 5;
};

message FunctionFailure {
  string keyspace = 1;
  string function = 2;
  repeated string arg_types = 3;
}

message WriteFailure {
  Consistency consistency = 1;
  int32 received = 2;
  int32 block_for = 3;
  int32 num_failures = 4;
  string write_type = 5;
}

message AlreadyExists {
  string keyspace = 1;
  string table = 2;
}

message Error {
  ErrorCode code = 1;
  oneof data {
    string message = 2;
    Unavailable unavailable = 4;
    WriteTimeout write_timeout = 5;
    ReadTimeout read_timeout = 6;
    ReadFailure read_failure = 7;
    FunctionFailure function_failure = 8;
    WriteFailure write_failure = 9;
    AlreadyExists already_exists = 10;
  }
}

message Row {
  repeated sint32 lengths = 1; // -1 == null
  bytes values = 2;
}

/*
message Row {
  repeated Value values = 1;
}
 */

message ResultSet {
  repeated ColumnSpec columns = 1;
  repeated Row rows = 2;
  bool applied = 3;
}

message BatchQuery {
  enum Kind {
    QUERY = 0;
    PREPARED = 1;
  }
  Kind kind = 1;
  oneof query_or_id {
    string query = 2;
    bytes id = 3;
  }
  repeated bytes values = 4;
  repeated bytes value_names = 5;
}

message BatchParameters {
  string keyspace = 1;
  Consistency consistency = 2;
  int64 timestamp = 9;
  Consistency serial_consistency = 10;
  int32 now_in_seconds = 11;
}

message Batch {
  enum Type {
    LOGGED = 0;
    UNLOGGED = 1;
    COUNTER = 2;
  }
  Type type = 1;
  repeated BatchQuery queries = 2;
  BatchParameters parameters = 3;
}
